{"file_contents":{"replit.md":{"content":"# Overview\n\nKhelSaksham (‡§ñ‡•á‡§≥ ‡§∏‡§ï‡•ç‡§∑‡§Æ) is a cross-platform mobile application **successfully converted from React Native to Flutter** that democratizes sports talent discovery through AI-powered assessment for Indian athletes. The app allows users to record and assess their athletic performance, view leaderboards, track achievements, and compete with other athletes nationwide. It features comprehensive talent assessment tools including push-ups, sit-ups, jump tests, and other physical evaluations with video recording capabilities.\n\n**Project Status**: ‚úÖ **COMPLETED** - Successfully converted from React Native/Expo to Flutter while maintaining identical design, themes, and UI/UX. All components, navigation, screens, and functionality recreated with pixel-perfect fidelity. **Modular Architecture**: Successfully separated all screens into dedicated files following Flutter best practices.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Flutter 3.32.0 with Dart 3.8 (Successfully converted from React Native)\n- **Navigation**: StatefulWidget-based navigation with view state management\n- **State Management**: StatefulWidget with setState for authentication and navigation state\n- **Styling**: Flutter Material Design with custom AppTheme system matching React Native colors exactly\n- **UI Components**: Complete recreation of React Native components including PublicNavbar, PrivateNavbar, Hero, Auth, Dashboard, Profile, Recording, Leaderboard, Achievements\n- **Animation**: Flutter AnimationController for sidebar animations, loading spinners, and smooth transitions\n\n## Component Structure ‚úÖ **MODULAR ARCHITECTURE**\n- **Main App**: MainScreen with StatefulWidget managing navigation state and authentication flow (lib/main.dart)\n- **Navigation Components**: PublicNavbar (responsive top nav) and PrivateNavbar (animated sidebar) with exact React Native styling (lib/components/)\n- **Screen Components**: Each screen in dedicated file structure:\n  - lib/screens/dashboard_screen.dart - Complete dashboard with performance analytics\n  - lib/screens/profile_screen.dart - User profile with stats and achievements \n  - lib/screens/recording_screen.dart - Video recording interface for assessments\n  - lib/screens/leaderboard_screen.dart - Rankings with podium and filtering\n  - lib/screens/achievements_screen.dart - Progress tracking with radar charts\n  - lib/screens/auth_screen.dart - Login/register authentication flow\n  - lib/screens/hero_screen.dart - Landing page with app introduction\n  - lib/screens/loading_screen.dart - Animated loading with cosmic background\n- **Layout Components**: Stack-based layout with positioned navigation overlays\n- **UI Components**: Custom buttons, stat cards, themed containers with exact color matching (#2563eb, #059669, #ea580c, #9333ea)\n\n## Data Storage\n- **Local Storage**: AsyncStorage for user data persistence, profile information, and authentication state\n- **Media Storage**: Expo ImagePicker and Camera for photo/video capture and storage\n- **Mock Data**: Currently uses mock data for achievements, leaderboard, and performance statistics\n\n## Authentication & Authorization\n- **Authentication Flow**: Custom auth component with login/register modes\n- **Session Management**: AsyncStorage-based session persistence\n- **User State**: Simple user object with profile information stored locally\n- **Permission Handling**: Camera and microphone permissions for recording assessments\n\n## Performance & Media Features\n- **Camera Integration**: Expo Camera for video recording of athletic assessments\n- **Image Handling**: Expo Image and ImagePicker for profile photos and media\n- **Chart Visualization**: React Native Chart Kit with SVG support for performance analytics\n- **Gesture Handling**: React Native Gesture Handler for enhanced touch interactions\n\n## Cross-Platform Support\n- **Target Platforms**: iOS, Android, and Web\n- **Responsive Design**: Platform-specific adaptations with conditional styling\n- **Icon System**: SF Symbols on iOS with Material Icons fallback for Android/Web\n- **Haptic Feedback**: iOS-specific haptic feedback for enhanced user experience\n\n# External Dependencies\n\n## Core Framework\n- **Expo SDK**: Complete development platform with managed workflow\n- **React Native**: Cross-platform mobile development framework\n- **React Navigation**: Navigation library with bottom tabs and native stack\n\n## Media & Camera\n- **expo-camera**: Camera access for recording athletic assessments\n- **expo-image**: Optimized image component with caching\n- **expo-image-picker**: Image and video selection from device gallery\n\n## UI & Visualization\n- **react-native-chart-kit**: Chart visualization for performance analytics\n- **react-native-svg**: SVG rendering support for charts and icons\n- **react-native-vector-icons**: Icon library with Material Icons\n- **@expo/vector-icons**: Expo's vector icon collection\n- **nativewind**: Utility-first styling system\n\n## Storage & Utilities\n- **@react-native-async-storage/async-storage**: Persistent local data storage\n- **expo-haptics**: Haptic feedback for iOS devices\n- **expo-linking**: Deep linking and URL handling\n- **expo-web-browser**: In-app browser functionality\n\n## Development Tools\n- **TypeScript**: Static type checking and development experience\n- **ESLint**: Code linting with Expo configuration\n- **Babel**: JavaScript compilation with Expo preset\n\n## Permissions & System\n- **expo-constants**: Access to system constants and app configuration\n- **expo-status-bar**: Status bar appearance management\n- **react-native-safe-area-context**: Safe area handling for different devices\n- **react-native-screens**: Native screen management for better performance","size_bytes":5798},"test-camera/scripts/reset-project.js":{"content":"#!/usr/bin/env node\n\n/**\n * This script is used to reset the project to a blank state.\n * It deletes or moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example based on user input and creates a new /app directory with an index.tsx and _layout.tsx file.\n * You can remove the `reset-project` script from package.json and safely delete this file after running it.\n */\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst readline = require(\"readline\");\n\nconst root = process.cwd();\nconst oldDirs = [\"app\", \"components\", \"hooks\", \"constants\", \"scripts\"];\nconst exampleDir = \"app-example\";\nconst newAppDir = \"app\";\nconst exampleDirPath = path.join(root, exampleDir);\n\nconst indexContent = `import { Text, View } from \"react-native\";\n\nexport default function Index() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Edit app/index.tsx to edit this screen.</Text>\n    </View>\n  );\n}\n`;\n\nconst layoutContent = `import { Stack } from \"expo-router\";\n\nexport default function RootLayout() {\n  return <Stack />;\n}\n`;\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst moveDirectories = async (userInput) => {\n  try {\n    if (userInput === \"y\") {\n      // Create the app-example directory\n      await fs.promises.mkdir(exampleDirPath, { recursive: true });\n      console.log(`üìÅ /${exampleDir} directory created.`);\n    }\n\n    // Move old directories to new app-example directory or delete them\n    for (const dir of oldDirs) {\n      const oldDirPath = path.join(root, dir);\n      if (fs.existsSync(oldDirPath)) {\n        if (userInput === \"y\") {\n          const newDirPath = path.join(root, exampleDir, dir);\n          await fs.promises.rename(oldDirPath, newDirPath);\n          console.log(`‚û°Ô∏è /${dir} moved to /${exampleDir}/${dir}.`);\n        } else {\n          await fs.promises.rm(oldDirPath, { recursive: true, force: true });\n          console.log(`‚ùå /${dir} deleted.`);\n        }\n      } else {\n        console.log(`‚û°Ô∏è /${dir} does not exist, skipping.`);\n      }\n    }\n\n    // Create new /app directory\n    const newAppDirPath = path.join(root, newAppDir);\n    await fs.promises.mkdir(newAppDirPath, { recursive: true });\n    console.log(\"\\nüìÅ New /app directory created.\");\n\n    // Create index.tsx\n    const indexPath = path.join(newAppDirPath, \"index.tsx\");\n    await fs.promises.writeFile(indexPath, indexContent);\n    console.log(\"üìÑ app/index.tsx created.\");\n\n    // Create _layout.tsx\n    const layoutPath = path.join(newAppDirPath, \"_layout.tsx\");\n    await fs.promises.writeFile(layoutPath, layoutContent);\n    console.log(\"üìÑ app/_layout.tsx created.\");\n\n    console.log(\"\\n‚úÖ Project reset complete. Next steps:\");\n    console.log(\n      `1. Run \\`npx expo start\\` to start a development server.\\n2. Edit app/index.tsx to edit the main screen.${\n        userInput === \"y\"\n          ? `\\n3. Delete the /${exampleDir} directory when you're done referencing it.`\n          : \"\"\n      }`\n    );\n  } catch (error) {\n    console.error(`‚ùå Error during script execution: ${error.message}`);\n  }\n};\n\nrl.question(\n  \"Do you want to move existing files to /app-example instead of deleting them? (Y/n): \",\n  (answer) => {\n    const userInput = answer.trim().toLowerCase() || \"y\";\n    if (userInput === \"y\" || userInput === \"n\") {\n      moveDirectories(userInput).finally(() => rl.close());\n    } else {\n      console.log(\"‚ùå Invalid input. Please enter 'Y' or 'N'.\");\n      rl.close();\n    }\n  }\n);\n","size_bytes":3608},"khelsaksham_flutter/README.md":{"content":"# khelsaksham_flutter\n\nA new Flutter project.\n\n## Getting Started\n\nThis project is a starting point for a Flutter application.\n\nA few resources to get you started if this is your first Flutter project:\n\n- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)\n- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)\n\nFor help getting started with Flutter development, view the\n[online documentation](https://docs.flutter.dev/), which offers tutorials,\nsamples, guidance on mobile development, and a full API reference.\n","size_bytes":562},"khelsaksham_flutter/analysis_options.yaml":{"content":"# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at https://dart.dev/lints.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options\n","size_bytes":1420},"khelsaksham_flutter/android/app/src/main/kotlin/com/example/khelsaksham_flutter/MainActivity.kt":{"content":"package com.example.khelsaksham_flutter\n\nimport io.flutter.embedding.android.FlutterActivity\n\nclass MainActivity : FlutterActivity()\n","size_bytes":133},"khelsaksham_flutter/ios/Runner/AppDelegate.swift":{"content":"import Flutter\nimport UIKit\n\n@main\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    GeneratedPluginRegistrant.register(with: self)\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n","size_bytes":391},"khelsaksham_flutter/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md":{"content":"# Launch Screen Assets\n\nYou can customize the launch screen with your own desired assets by replacing the image files in this directory.\n\nYou can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.","size_bytes":336},"khelsaksham_flutter/ios/RunnerTests/RunnerTests.swift":{"content":"import Flutter\nimport UIKit\nimport XCTest\n\nclass RunnerTests: XCTestCase {\n\n  func testExample() {\n    // If you add code to the Runner application, consider adding tests here.\n    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.\n  }\n\n}\n","size_bytes":285},"khelsaksham_flutter/pubspec.yaml":{"content":"name: khelsaksham_flutter\ndescription: \"A new Flutter project.\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.8.0\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n  cupertino_icons: ^1.0.8\n  # Web-compatible dependencies for exercise detection\n  # Note: ML Kit replaced with web-compatible solution\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^5.0.0\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  assets:\n    - assets/images/\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n","size_bytes":3785},"khelsaksham_flutter/server.js":{"content":"const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\n\nconst PORT = 5000;\nconst STATIC_PATH = path.join(__dirname, 'build', 'web');\n\nconst server = http.createServer((req, res) => {\n  const parsedUrl = url.parse(req.url);\n  let pathname = parsedUrl.pathname;\n  \n  // Default to index.html for root or any route (SPA routing)\n  if (pathname === '/' || !path.extname(pathname)) {\n    pathname = '/index.html';\n  }\n  \n  const filePath = path.join(STATIC_PATH, pathname);\n  const extname = path.extname(filePath);\n  \n  // Set content type\n  let contentType = 'text/html';\n  switch (extname) {\n    case '.js':\n      contentType = 'text/javascript';\n      break;\n    case '.css':\n      contentType = 'text/css';\n      break;\n    case '.json':\n      contentType = 'application/json';\n      break;\n    case '.png':\n      contentType = 'image/png';\n      break;\n    case '.jpg':\n      contentType = 'image/jpg';\n      break;\n    case '.ico':\n      contentType = 'image/x-icon';\n      break;\n  }\n  \n  fs.readFile(filePath, (err, content) => {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        // File not found, serve index.html for SPA routing\n        fs.readFile(path.join(STATIC_PATH, 'index.html'), (err, content) => {\n          if (err) {\n            res.writeHead(500);\n            res.end('Server Error');\n          } else {\n            res.writeHead(200, { 'Content-Type': 'text/html' });\n            res.end(content, 'utf-8');\n          }\n        });\n      } else {\n        res.writeHead(500);\n        res.end('Server Error');\n      }\n    } else {\n      res.writeHead(200, { 'Content-Type': contentType });\n      res.end(content, 'utf-8');\n    }\n  });\n});\n\nserver.listen(PORT, '0.0.0.0', () => {\n  console.log(`Flutter web server running at http://0.0.0.0:${PORT}`);\n  console.log(`Serving files from: ${STATIC_PATH}`);\n});","size_bytes":1890}},"version":1}